// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/v1tbrah/feed-service/internal/model"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// AddPostToUser provides a mock function with given fields: ctx, userID, post
func (_m *Cache) AddPostToUser(ctx context.Context, userID int64, post model.Post) error {
	ret := _m.Called(ctx, userID, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.Post) error); ok {
		r0 = rf(ctx, userID, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPostsToUser provides a mock function with given fields: ctx, userID, posts
func (_m *Cache) AddPostsToUser(ctx context.Context, userID int64, posts []model.Post) error {
	ret := _m.Called(ctx, userID, posts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []model.Post) error); ok {
		r0 = rf(ctx, userID, posts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePostFromUser provides a mock function with given fields: ctx, userID, postID
func (_m *Cache) RemovePostFromUser(ctx context.Context, userID int64, postID int64) error {
	ret := _m.Called(ctx, userID, postID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePostsByUserID provides a mock function with given fields: ctx, userID, userIDWithWhichPostsNeedRemove
func (_m *Cache) RemovePostsByUserID(ctx context.Context, userID int64, userIDWithWhichPostsNeedRemove int64) error {
	ret := _m.Called(ctx, userID, userIDWithWhichPostsNeedRemove)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, userIDWithWhichPostsNeedRemove)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCache(t mockConstructorTestingTNewCache) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
